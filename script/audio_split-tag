#!/usr/bin/env bash
# audio_Split-Tag - Splits a full audio file using a .cue file and tags each track.
# Supports FLAC, M4A, and APE input. Can inject cover art and optionally delete original file.
set -euo pipefail
IFS=$'\n\t'

show_help() {
  cat <<EOF
Usage: ${0##*/} [-d DIR] [-c CUEFILE] [-f AUDIOFILE] [--delete-original]

Options:
  -d, --directory DIR         Target directory (default: current)
  -c, --cue FILE              Specify .cue file
  -f, --audio_file FILE       Specify audio file (.flac, .m4a, .ape)
      --delete-original       Delete original file after successful split
  -h, --help                  Show this help message
EOF
}

# Defaults
dir="."
cue_file=""
audio_file=""
delete_original=false

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -d|--directory)
      dir="$2"
      shift 2
      ;;
    -c|--cue)
      cue_file="$2"
      shift 2
      ;;
    -f|--audio_file)
      audio_file="$2"
      shift 2
      ;;
    --delete-original)
      delete_original=true
      shift
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    *)
      echo "‚ùå Unknown argument: $1"
      show_help
      exit 1
      ;;
  esac
done

# File discovery
shopt -s nullglob
cd "$dir"
[[ -z "$cue_file" ]] && cue_files=(*.cue) || cue_files=("$cue_file")
[[ -z "$audio_file" ]] && audio_files=(*.flac *.m4a *.ape) || audio_files=("$audio_file")
shopt -u nullglob

# Sanity checks
if [[ ${#cue_files[@]} -ne 1 ]]; then
  echo "‚ùå Error: Expected exactly one .cue file. Found ${#cue_files[@]}."
  exit 1
fi
if [[ ${#audio_files[@]} -ne 1 ]]; then
  echo "‚ùå Error: Expected exactly one .flac/.m4a/.ape file. Found ${#audio_files[@]}."
  exit 1
fi

cue_file="${cue_files[0]}"
input_file="${audio_files[0]}"
input_ext="${input_file##*.}"
base="${input_file%.*}"

# Convert if necessary
case "$input_ext" in
  m4a)
    converted_flac="${base}.converted.flac"
    echo "üîÅ Converting .m4a to .flac: $converted_flac"
    ffmpeg -loglevel error -y -i "$input_file" "$converted_flac"
    audio_flac="$converted_flac"
    ;;
  ape)
    wav_file="${base}.decoded.wav"
    echo "üîÅ Decoding .ape to .wav: $wav_file"
    ffmpeg -loglevel error -y -i "$input_file" "$wav_file"
    audio_flac="$wav_file"
    ;;
  flac)
    audio_flac="$input_file"
    ;;
  *)
    echo "‚ùå Unsupported audio format: .$input_ext"
    exit 1
    ;;
esac

echo "üìÅ Directory: $(pwd)"
echo "üéß Audio:     $audio_flac"
echo "üìÑ CUE:       $cue_file"
echo "üî™ Splitting..."

# Split the audio file
shnsplit -f "$cue_file" -t "%n - %t" -o flac "$audio_flac"

# Remove decoded WAV if created
[[ "${wav_file:-}" ]] && [[ -f "$wav_file" ]] && rm -f "$wav_file"

# Get list of FLACs after split
split_files=($(find . -maxdepth 1 -type f -name '[0-9]* - *.flac' | sort))

# Check if split was successful
if [[ ${#split_files[@]} -eq 0 ]]; then
  echo "‚ùå Error: No split files found."
  exit 1
fi

# Get track count from cue
track_count=$(grep -i "^ *TRACK [0-9][0-9]* AUDIO" "$cue_file" | wc -l)

# Delete pregap track if present
pregap_file=$(find . -maxdepth 1 -type f -name '00 - *.flac' | head -n1)
if [[ -n "$pregap_file" ]]; then
  echo "üóëÔ∏è  Deleting pregap track: $pregap_file"
  rm -f "$pregap_file"
fi

# Refresh the list after deletion
split_files=($(find . -maxdepth 1 -type f -name '[0-9]* - *.flac' | sort))

# Warn if still more files than expected
if (( ${#split_files[@]} > track_count )); then
  echo "‚ö†Ô∏è  Warning: Still too many split files (${#split_files[@]} > $track_count)"
fi

echo "üè∑Ô∏è  Applying tags..."
for ((i=1; i<=track_count; i++)); do
  track_num=$(printf "%02d" "$i")
  file="${split_files[$((i-1))]}"
  [ -f "$file" ] || continue
  cuetag.sh "$cue_file" "$file" >/dev/null 2>&1 || echo "‚ùå Tagging failed for $file"
done

echo "üñºÔ∏è  Injecting cover art..."
for img in front.jpg cover.jpg cover.jpeg folder.jpg back.jpg edge.jpg *.jpg *.png; do
  [[ -f "$img" ]] || continue
  for f in "${split_files[@]}"; do
    metaflac --remove --block-type=PICTURE "$f" || true
    metaflac --import-picture-from="$img" "$f"
  done
  break
done

# Cleanup
if $delete_original; then
  echo "üßπ Deleting original: $input_file"
  rm -f "$input_file"
fi

echo "‚úÖ Done. Tracks split and tagged in '$dir'"
